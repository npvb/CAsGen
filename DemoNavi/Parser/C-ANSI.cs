//Generated by the GOLD Parser Builder

using DemoNavi.IntermediateRepresentation;
using System;
using System.IO;
using DemoNavi.Utility;
using DemoNavi.Parser;
namespace DemoNavi
{
    using Type = DemoNavi.IntermediateRepresentation.Types.IRType;
    using System.Collections.Generic;
    using DemoNavi.IntermediateRepresentation.Types;
    using DemoNavi.IntermediateRepresentation.Statements;
    using DemoNavi.IntermediateRepresentation.Expressions;
    public class MyParser
    {
        public MyParser()
        {
            this.Setup();
        }
        private GOLD.Parser parser = new GOLD.Parser();

        private enum SymbolIndex
        {
            @Eof = 0,                                  // (EOF)
            @Error = 1,                                // (Error)
            @Comment = 2,                              // Comment
            @Newline = 3,                              // NewLine
            @Whitespace = 4,                           // Whitespace
            @Timesdiv = 5,                             // '*/'
            @Divtimes = 6,                             // '/*'
            @Divdiv = 7,                               // '//'
            @Minus = 8,                                // '-'
            @Minusminus = 9,                           // '--'
            @Exclam = 10,                              // '!'
            @Exclameq = 11,                            // '!='
            @Percent = 12,                             // '%'
            @Amp = 13,                                 // '&'
            @Ampamp = 14,                              // '&&'
            @Ampeq = 15,                               // '&='
            @Lparen = 16,                              // '('
            @Rparen = 17,                              // ')'
            @Times = 18,                               // '*'
            @Timeseq = 19,                             // '*='
            @Comma = 20,                               // ','
            @Dot = 21,                                 // '.'
            @Div = 22,                                 // '/'
            @Diveq = 23,                               // '/='
            @Colon = 24,                               // ':'
            @Semi = 25,                                // ';'
            @Question = 26,                            // '?'
            @Lbracket = 27,                            // '['
            @Rbracket = 28,                            // ']'
            @Caret = 29,                               // '^'
            @Careteq = 30,                             // '^='
            @Lbrace = 31,                              // '{'
            @Pipe = 32,                                // '|'
            @Pipepipe = 33,                            // '||'
            @Pipeeq = 34,                              // '|='
            @Rbrace = 35,                              // '}'
            @Tilde = 36,                               // '~'
            @Plus = 37,                                // '+'
            @Plusplus = 38,                            // '++'
            @Pluseq = 39,                              // '+='
            @Lt = 40,                                  // '<'
            @Ltlt = 41,                                // '<<'
            @Ltlteq = 42,                              // '<<='
            @Lteq = 43,                                // '<='
            @Eq = 44,                                  // '='
            @Minuseq = 45,                             // '-='
            @Eqeq = 46,                                // '=='
            @Gt = 47,                                  // '>'
            @Minusgt = 48,                             // '->'
            @Gteq = 49,                                // '>='
            @Gtgt = 50,                                // '>>'
            @Gtgteq = 51,                              // '>>='
            @Auto = 52,                                // auto
            @Break = 53,                               // break
            @Case = 54,                                // case
            @Char = 55,                                // char
            @Charliteral = 56,                         // CharLiteral
            @Const = 57,                               // const
            @Continue = 58,                            // continue
            @Decliteral = 59,                          // DecLiteral
            @Default = 60,                             // default
            @Do = 61,                                  // do
            @Double = 62,                              // double
            @Else = 63,                                // else
            @Enum = 64,                                // enum
            @Extern = 65,                              // extern
            @Float = 66,                               // float
            @Floatliteral = 67,                        // FloatLiteral
            @For = 68,                                 // for
            @Goto = 69,                                // goto
            @Hexliteral = 70,                          // HexLiteral
            @Id = 71,                                  // Id
            @If = 72,                                  // if
            @Int = 73,                                 // int
            @Long = 74,                                // long
            @Octliteral = 75,                          // OctLiteral
            @Register = 76,                            // register
            @Return = 77,                              // return
            @Short = 78,                               // short
            @Signed = 79,                              // signed
            @Sizeof = 80,                              // sizeof
            @Static = 81,                              // static
            @Stringliteral = 82,                       // StringLiteral
            @Struct = 83,                              // struct
            @Switch = 84,                              // switch
            @Typedef = 85,                             // typedef
            @Union = 86,                               // union
            @Unsigned = 87,                            // unsigned
            @Void = 88,                                // void
            @Volatile = 89,                            // volatile
            @While = 90,                               // while
            @Arg = 91,                                 // <Arg>
            @Array = 92,                               // <Array>
            @Base = 93,                                // <Base>
            @Block = 94,                               // <Block>
            @Casestms = 95,                            // <Case Stms>
            @Decl = 96,                                // <Decl>
            @Decls = 97,                               // <Decls>
            @Enumdecl = 98,                            // <Enum Decl>
            @Enumdef = 99,                             // <Enum Def>
            @Enumval = 100,                            // <Enum Val>
            @Expr = 101,                               // <Expr>
            @Funcdecl = 102,                           // <Func Decl>
            @Funcid = 103,                             // <Func ID>
            @Funcproto = 104,                          // <Func Proto>
            @Idlist = 105,                             // <Id List>
            @Mod = 106,                                // <Mod>
            @Normalstm = 107,                          // <Normal Stm>
            @Opadd = 108,                              // <Op Add>
            @Opand = 109,                              // <Op And>
            @Opassign = 110,                           // <Op Assign>
            @Opbinand = 111,                           // <Op BinAND>
            @Opbinor = 112,                            // <Op BinOR>
            @Opbinxor = 113,                           // <Op BinXOR>
            @Opcompare = 114,                          // <Op Compare>
            @Opequate = 115,                           // <Op Equate>
            @Opif = 116,                               // <Op If>
            @Opmult = 117,                             // <Op Mult>
            @Opor = 118,                               // <Op Or>
            @Oppointer = 119,                          // <Op Pointer>
            @Opshift = 120,                            // <Op Shift>
            @Opunary = 121,                            // <Op Unary>
            @Param = 122,                              // <Param>
            @Params = 123,                             // <Params>
            @Pointers = 124,                           // <Pointers>
            @Scalar = 125,                             // <Scalar>
            @Sign = 126,                               // <Sign>
            @Stm = 127,                                // <Stm>
            @Stmlist = 128,                            // <Stm List>
            @Structdecl = 129,                         // <Struct Decl>
            @Structdef = 130,                          // <Struct Def>
            @Thenstm = 131,                            // <Then Stm>
            @Type = 132,                               // <Type>
            @Typedefdecl = 133,                        // <Typedef Decl>
            @Types = 134,                              // <Types>
            @Uniondecl = 135,                          // <Union Decl>
            @Value = 136,                              // <Value>
            @Var = 137,                                // <Var>
            @Vardecl = 138,                            // <Var Decl>
            @Varitem = 139,                            // <Var Item>
            @Varlist = 140                             // <Var List>
        }

        private enum ProductionIndex
        {
            @Decls = 0,                                // <Decls> ::= <Decl> <Decls>
            @Decls2 = 1,                               // <Decls> ::= 
            @Decl = 2,                                 // <Decl> ::= <Func Decl>
            @Decl2 = 3,                                // <Decl> ::= <Func Proto>
            @Decl3 = 4,                                // <Decl> ::= <Struct Decl>
            @Decl4 = 5,                                // <Decl> ::= <Union Decl>
            @Decl5 = 6,                                // <Decl> ::= <Enum Decl>
            @Decl6 = 7,                                // <Decl> ::= <Var Decl>
            @Decl7 = 8,                                // <Decl> ::= <Typedef Decl>
            @Funcproto_Lparen_Rparen_Semi = 9,         // <Func Proto> ::= <Func ID> '(' <Types> ')' ';'
            @Funcproto_Lparen_Rparen_Semi2 = 10,       // <Func Proto> ::= <Func ID> '(' <Params> ')' ';'
            @Funcproto_Lparen_Rparen_Semi3 = 11,       // <Func Proto> ::= <Func ID> '(' ')' ';'
            @Funcdecl_Lparen_Rparen = 12,              // <Func Decl> ::= <Func ID> '(' <Params> ')' <Block>
            @Funcdecl_Lparen_Rparen2 = 13,             // <Func Decl> ::= <Func ID> '(' <Id List> ')' <Struct Def> <Block>
            @Funcdecl_Lparen_Rparen3 = 14,             // <Func Decl> ::= <Func ID> '(' ')' <Block>
            @Params_Comma = 15,                        // <Params> ::= <Param> ',' <Params>
            @Params = 16,                              // <Params> ::= <Param>
            @Param_Const_Id = 17,                      // <Param> ::= const <Type> Id
            @Param_Id = 18,                            // <Param> ::= <Type> Id
            @Types_Comma = 19,                         // <Types> ::= <Type> ',' <Types>
            @Types = 20,                               // <Types> ::= <Type>
            @Idlist_Id_Comma = 21,                     // <Id List> ::= Id ',' <Id List>
            @Idlist_Id = 22,                           // <Id List> ::= Id
            @Funcid_Id = 23,                           // <Func ID> ::= <Type> Id
            @Funcid_Id2 = 24,                          // <Func ID> ::= Id
            @Typedefdecl_Typedef_Id_Semi = 25,         // <Typedef Decl> ::= typedef <Type> Id ';'
            @Structdecl_Struct_Id_Lbrace_Rbrace_Semi = 26,  // <Struct Decl> ::= struct Id '{' <Struct Def> '}' ';'
            @Uniondecl_Union_Id_Lbrace_Rbrace_Semi = 27,  // <Union Decl> ::= union Id '{' <Struct Def> '}' ';'
            @Structdef = 28,                           // <Struct Def> ::= <Var Decl> <Struct Def>
            @Structdef2 = 29,                          // <Struct Def> ::= <Var Decl>
            @Vardecl_Semi = 30,                        // <Var Decl> ::= <Mod> <Type> <Var> <Var List> ';'
            @Vardecl_Semi2 = 31,                       // <Var Decl> ::= <Type> <Var> <Var List> ';'
            @Vardecl_Semi3 = 32,                       // <Var Decl> ::= <Mod> <Var> <Var List> ';'
            @Var_Id = 33,                              // <Var> ::= Id <Array>
            @Var_Id_Eq = 34,                           // <Var> ::= Id <Array> '=' <Op If>
            @Array_Lbracket_Rbracket = 35,             // <Array> ::= '[' <Expr> ']'
            @Array_Lbracket_Rbracket2 = 36,            // <Array> ::= '[' ']'
            @Array = 37,                               // <Array> ::= 
            @Varlist_Comma = 38,                       // <Var List> ::= ',' <Var Item> <Var List>
            @Varlist = 39,                             // <Var List> ::= 
            @Varitem = 40,                             // <Var Item> ::= <Pointers> <Var>
            @Mod_Extern = 41,                          // <Mod> ::= extern
            @Mod_Static = 42,                          // <Mod> ::= static
            @Mod_Register = 43,                        // <Mod> ::= register
            @Mod_Auto = 44,                            // <Mod> ::= auto
            @Mod_Volatile = 45,                        // <Mod> ::= volatile
            @Mod_Const = 46,                           // <Mod> ::= const
            @Enumdecl_Enum_Id_Lbrace_Rbrace_Semi = 47,  // <Enum Decl> ::= enum Id '{' <Enum Def> '}' ';'
            @Enumdef_Comma = 48,                       // <Enum Def> ::= <Enum Val> ',' <Enum Def>
            @Enumdef = 49,                             // <Enum Def> ::= <Enum Val>
            @Enumval_Id = 50,                          // <Enum Val> ::= Id
            @Enumval_Id_Eq_Octliteral = 51,            // <Enum Val> ::= Id '=' OctLiteral
            @Enumval_Id_Eq_Hexliteral = 52,            // <Enum Val> ::= Id '=' HexLiteral
            @Enumval_Id_Eq_Decliteral = 53,            // <Enum Val> ::= Id '=' DecLiteral
            @Type = 54,                                // <Type> ::= <Base> <Pointers>
            @Base = 55,                                // <Base> ::= <Sign> <Scalar>
            @Base_Struct_Id = 56,                      // <Base> ::= struct Id
            @Base_Struct_Lbrace_Rbrace = 57,           // <Base> ::= struct '{' <Struct Def> '}'
            @Base_Union_Id = 58,                       // <Base> ::= union Id
            @Base_Union_Lbrace_Rbrace = 59,            // <Base> ::= union '{' <Struct Def> '}'
            @Base_Enum_Id = 60,                        // <Base> ::= enum Id
            @Sign_Signed = 61,                         // <Sign> ::= signed
            @Sign_Unsigned = 62,                       // <Sign> ::= unsigned
            @Sign = 63,                                // <Sign> ::= 
            @Scalar_Char = 64,                         // <Scalar> ::= char
            @Scalar_Int = 65,                          // <Scalar> ::= int
            @Scalar_Short = 66,                        // <Scalar> ::= short
            @Scalar_Long = 67,                         // <Scalar> ::= long
            @Scalar_Short_Int = 68,                    // <Scalar> ::= short int
            @Scalar_Long_Int = 69,                     // <Scalar> ::= long int
            @Scalar_Float = 70,                        // <Scalar> ::= float
            @Scalar_Double = 71,                       // <Scalar> ::= double
            @Scalar_Void = 72,                         // <Scalar> ::= void
            @Pointers_Times = 73,                      // <Pointers> ::= '*' <Pointers>
            @Pointers = 74,                            // <Pointers> ::= 
            @Stm = 75,                                 // <Stm> ::= <Var Decl>
            @Stm_Id_Colon = 76,                        // <Stm> ::= Id ':'
            @Stm_If_Lparen_Rparen = 77,                // <Stm> ::= if '(' <Expr> ')' <Stm>
            @Stm_If_Lparen_Rparen_Else = 78,           // <Stm> ::= if '(' <Expr> ')' <Then Stm> else <Stm>
            @Stm_While_Lparen_Rparen = 79,             // <Stm> ::= while '(' <Expr> ')' <Stm>
            @Stm_For_Lparen_Semi_Semi_Rparen = 80,     // <Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Stm>
            @Stm2 = 81,                                // <Stm> ::= <Normal Stm>
            @Thenstm_If_Lparen_Rparen_Else = 82,       // <Then Stm> ::= if '(' <Expr> ')' <Then Stm> else <Then Stm>
            @Thenstm_While_Lparen_Rparen = 83,         // <Then Stm> ::= while '(' <Expr> ')' <Then Stm>
            @Thenstm_For_Lparen_Semi_Semi_Rparen = 84,  // <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
            @Thenstm = 85,                             // <Then Stm> ::= <Normal Stm>
            @Normalstm_Do_While_Lparen_Rparen = 86,    // <Normal Stm> ::= do <Stm> while '(' <Expr> ')'
            @Normalstm_Switch_Lparen_Rparen_Lbrace_Rbrace = 87,  // <Normal Stm> ::= switch '(' <Expr> ')' '{' <Case Stms> '}'
            @Normalstm = 88,                           // <Normal Stm> ::= <Block>
            @Normalstm_Semi = 89,                      // <Normal Stm> ::= <Expr> ';'
            @Normalstm_Goto_Id_Semi = 90,              // <Normal Stm> ::= goto Id ';'
            @Normalstm_Break_Semi = 91,                // <Normal Stm> ::= break ';'
            @Normalstm_Continue_Semi = 92,             // <Normal Stm> ::= continue ';'
            @Normalstm_Return_Semi = 93,               // <Normal Stm> ::= return <Expr> ';'
            @Normalstm_Semi2 = 94,                     // <Normal Stm> ::= ';'
            @Arg = 95,                                 // <Arg> ::= <Expr>
            @Arg2 = 96,                                // <Arg> ::= 
            @Casestms_Case_Colon = 97,                 // <Case Stms> ::= case <Value> ':' <Stm List> <Case Stms>
            @Casestms_Default_Colon = 98,              // <Case Stms> ::= default ':' <Stm List>
            @Casestms = 99,                            // <Case Stms> ::= 
            @Block_Lbrace_Rbrace = 100,                // <Block> ::= '{' <Stm List> '}'
            @Stmlist = 101,                            // <Stm List> ::= <Stm> <Stm List>
            @Stmlist2 = 102,                           // <Stm List> ::= 
            @Expr_Comma = 103,                         // <Expr> ::= <Expr> ',' <Op Assign>
            @Expr = 104,                               // <Expr> ::= <Op Assign>
            @Opassign_Eq = 105,                        // <Op Assign> ::= <Op If> '=' <Op Assign>
            @Opassign_Pluseq = 106,                    // <Op Assign> ::= <Op If> '+=' <Op Assign>
            @Opassign_Minuseq = 107,                   // <Op Assign> ::= <Op If> '-=' <Op Assign>
            @Opassign_Timeseq = 108,                   // <Op Assign> ::= <Op If> '*=' <Op Assign>
            @Opassign_Diveq = 109,                     // <Op Assign> ::= <Op If> '/=' <Op Assign>
            @Opassign_Careteq = 110,                   // <Op Assign> ::= <Op If> '^=' <Op Assign>
            @Opassign_Ampeq = 111,                     // <Op Assign> ::= <Op If> '&=' <Op Assign>
            @Opassign_Pipeeq = 112,                    // <Op Assign> ::= <Op If> '|=' <Op Assign>
            @Opassign_Gtgteq = 113,                    // <Op Assign> ::= <Op If> '>>=' <Op Assign>
            @Opassign_Ltlteq = 114,                    // <Op Assign> ::= <Op If> '<<=' <Op Assign>
            @Opassign = 115,                           // <Op Assign> ::= <Op If>
            @Opif_Question_Colon = 116,                // <Op If> ::= <Op Or> '?' <Op If> ':' <Op If>
            @Opif = 117,                               // <Op If> ::= <Op Or>
            @Opor_Pipepipe = 118,                      // <Op Or> ::= <Op Or> '||' <Op And>
            @Opor = 119,                               // <Op Or> ::= <Op And>
            @Opand_Ampamp = 120,                       // <Op And> ::= <Op And> '&&' <Op BinOR>
            @Opand = 121,                              // <Op And> ::= <Op BinOR>
            @Opbinor_Pipe = 122,                       // <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR>
            @Opbinor = 123,                            // <Op BinOR> ::= <Op BinXOR>
            @Opbinxor_Caret = 124,                     // <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND>
            @Opbinxor = 125,                           // <Op BinXOR> ::= <Op BinAND>
            @Opbinand_Amp = 126,                       // <Op BinAND> ::= <Op BinAND> '&' <Op Equate>
            @Opbinand = 127,                           // <Op BinAND> ::= <Op Equate>
            @Opequate_Eqeq = 128,                      // <Op Equate> ::= <Op Equate> '==' <Op Compare>
            @Opequate_Exclameq = 129,                  // <Op Equate> ::= <Op Equate> '!=' <Op Compare>
            @Opequate = 130,                           // <Op Equate> ::= <Op Compare>
            @Opcompare_Lt = 131,                       // <Op Compare> ::= <Op Compare> '<' <Op Shift>
            @Opcompare_Gt = 132,                       // <Op Compare> ::= <Op Compare> '>' <Op Shift>
            @Opcompare_Lteq = 133,                     // <Op Compare> ::= <Op Compare> '<=' <Op Shift>
            @Opcompare_Gteq = 134,                     // <Op Compare> ::= <Op Compare> '>=' <Op Shift>
            @Opcompare = 135,                          // <Op Compare> ::= <Op Shift>
            @Opshift_Ltlt = 136,                       // <Op Shift> ::= <Op Shift> '<<' <Op Add>
            @Opshift_Gtgt = 137,                       // <Op Shift> ::= <Op Shift> '>>' <Op Add>
            @Opshift = 138,                            // <Op Shift> ::= <Op Add>
            @Opadd_Plus = 139,                         // <Op Add> ::= <Op Add> '+' <Op Mult>
            @Opadd_Minus = 140,                        // <Op Add> ::= <Op Add> '-' <Op Mult>
            @Opadd = 141,                              // <Op Add> ::= <Op Mult>
            @Opmult_Times = 142,                       // <Op Mult> ::= <Op Mult> '*' <Op Unary>
            @Opmult_Div = 143,                         // <Op Mult> ::= <Op Mult> '/' <Op Unary>
            @Opmult_Percent = 144,                     // <Op Mult> ::= <Op Mult> '%' <Op Unary>
            @Opmult = 145,                             // <Op Mult> ::= <Op Unary>
            @Opunary_Exclam = 146,                     // <Op Unary> ::= '!' <Op Unary>
            @Opunary_Tilde = 147,                      // <Op Unary> ::= '~' <Op Unary>
            @Opunary_Minus = 148,                      // <Op Unary> ::= '-' <Op Unary>
            @Opunary_Times = 149,                      // <Op Unary> ::= '*' <Op Unary>
            @Opunary_Amp = 150,                        // <Op Unary> ::= '&' <Op Unary>
            @Opunary_Plusplus = 151,                   // <Op Unary> ::= '++' <Op Unary>
            @Opunary_Minusminus = 152,                 // <Op Unary> ::= '--' <Op Unary>
            @Opunary_Plusplus2 = 153,                  // <Op Unary> ::= <Op Pointer> '++'
            @Opunary_Minusminus2 = 154,                // <Op Unary> ::= <Op Pointer> '--'
            @Opunary_Lparen_Rparen = 155,              // <Op Unary> ::= '(' <Type> ')' <Op Unary>
            @Opunary_Sizeof_Lparen_Rparen = 156,       // <Op Unary> ::= sizeof '(' <Type> ')'
            @Opunary_Sizeof_Lparen_Id_Rparen = 157,    // <Op Unary> ::= sizeof '(' Id <Pointers> ')'
            @Opunary = 158,                            // <Op Unary> ::= <Op Pointer>
            @Oppointer_Dot = 159,                      // <Op Pointer> ::= <Op Pointer> '.' <Value>
            @Oppointer_Minusgt = 160,                  // <Op Pointer> ::= <Op Pointer> '->' <Value>
            @Oppointer_Lbracket_Rbracket = 161,        // <Op Pointer> ::= <Op Pointer> '[' <Expr> ']'
            @Oppointer = 162,                          // <Op Pointer> ::= <Value>
            @Value_Octliteral = 163,                   // <Value> ::= OctLiteral
            @Value_Hexliteral = 164,                   // <Value> ::= HexLiteral
            @Value_Decliteral = 165,                   // <Value> ::= DecLiteral
            @Value_Stringliteral = 166,                // <Value> ::= StringLiteral
            @Value_Charliteral = 167,                  // <Value> ::= CharLiteral
            @Value_Floatliteral = 168,                 // <Value> ::= FloatLiteral
            @Value_Id_Lparen_Rparen = 169,             // <Value> ::= Id '(' <Expr> ')'
            @Value_Id_Lparen_Rparen2 = 170,            // <Value> ::= Id '(' ')'
            @Value_Id = 171,                           // <Value> ::= Id
            @Value_Lparen_Rparen = 172                 // <Value> ::= '(' <Expr> ')'
        }

        public Program Program {get; set;}     //You might derive a specific object

        private void Setup()
        {
            //This procedure can be called to load the parse tables. The class can
            //read tables using a BinaryReader.

            parser.LoadTables("C-ANSI.egt");
        }

        public bool Parse(string program)
        {
            return this.Parse(new StringReader(program));
        }

        public bool Parse(TextReader reader)
        {
            //This procedure starts the GOLD Parser Engine and handles each of the
            //messages it returns. Each time a reduction is made, you can create new
            //custom object and reassign the .CurrentReduction property. Otherwise, 
            //the system will use the Reduction object that was returned.
            //
            //The resulting tree will be a pure representation of the language 
            //and will be ready to implement.

            GOLD.ParseMessage response;
            bool done;                      //Controls when we leave the loop
            bool accepted = false;          //Was the parse successful?

            parser.Open(reader);
            parser.TrimReductions = false;  //Please read about this feature before enabling  

            done = false;
            while (!done)
            {
                response = parser.Parse();

                switch (response)
                {
                    case GOLD.ParseMessage.LexicalError:
                        //Cannot recognize token
                        done = true;
                        break;

                    case GOLD.ParseMessage.SyntaxError:
                        //Expecting a different token
                        done = true;
                        throw new LexicalErrorException(parser.ExpectedSymbols());
                       

                    case GOLD.ParseMessage.Reduction:
                        //Create a customized object to store the reduction

                        parser.CurrentReduction = CreateNewObject(parser.CurrentReduction as GOLD.Reduction);
                        break;

                    case GOLD.ParseMessage.Accept:
                        //Accepted!
                       Program = new Program(parser.CurrentReduction as List<DeclarationStatement>);   //The root node!                 
                        done = true;
                        accepted = true;
                        break;

                    case GOLD.ParseMessage.TokenRead:
                        //You don't have to do anything here.
                        break;

                    case GOLD.ParseMessage.InternalError:
                        //INTERNAL ERROR! Something is horribly wrong.
                        done = true;
                        break;

                    case GOLD.ParseMessage.NotLoadedError:
                        //This error occurs if the CGT was not loaded.                   
                        done = true;
                        break;

                    case GOLD.ParseMessage.GroupError:
                        //GROUP ERROR! Unexpected end of file
                        done = true;
                        break;
                }
            } //while

            return accepted;
        }

        private object CreateNewObject(GOLD.Reduction r)
        {
            object result = null;
            int pointerCount;
            switch ((ProductionIndex)r.Parent.TableIndex())
            {
                case ProductionIndex.Decls:
                    // <Decls> ::= <Decl> <Decls>
                    var declarationHead = r.GetData(0) as DeclarationStatement;
                    var declarationTail = r.GetData(1) as List<DeclarationStatement>;
                    declarationTail.Insert(0, declarationHead);
                    return declarationTail;

                case ProductionIndex.Decls2:
                    // <Decls> ::= 
                    return new List<DeclarationStatement>();
                    

                case ProductionIndex.Decl:
                    // <Decl> ::= <Func Decl>
                    return r.GetData(0);

                case ProductionIndex.Decl2:
                    // <Decl> ::= <Func Proto>
                    return r.GetData(0);

                case ProductionIndex.Decl3:
                    // <Decl> ::= <Struct Decl>
                    return r.GetData(0);

                case ProductionIndex.Decl4:
                    // <Decl> ::= <Union Decl>
                    return r.GetData(0);

                case ProductionIndex.Decl5:
                    // <Decl> ::= <Enum Decl>
                    return r.GetData(0);

                case ProductionIndex.Decl6:
                    // <Decl> ::= <Var Decl>
                    return r.GetData(0);

                case ProductionIndex.Decl7:
                    // <Decl> ::= <Typedef Decl>
                    return r.GetData(0);

                case ProductionIndex.Funcproto_Lparen_Rparen_Semi:
                    // <Func Proto> ::= <Func ID> '(' <Types> ')' ';'
                    break;

                case ProductionIndex.Funcproto_Lparen_Rparen_Semi2:
                    // <Func Proto> ::= <Func ID> '(' <Params> ')' ';'
                    break;

                case ProductionIndex.Funcproto_Lparen_Rparen_Semi3:
                    // <Func Proto> ::= <Func ID> '(' ')' ';'
                    break;

                case ProductionIndex.Funcdecl_Lparen_Rparen:
                    // <Func Decl> ::= <Func ID> '(' <Params> ')' <Block>
                    var function = r.GetData(0) as Function;
                    function.Parameters = r.GetData(2) as List<Parameter>;
                    function.Block = r.GetData(4) as BlockStatement;
                    return function;

                case ProductionIndex.Funcdecl_Lparen_Rparen2:
                    // <Func Decl> ::= <Func ID> '(' <Id List> ')' <Struct Def> <Block>
                    break;

                case ProductionIndex.Funcdecl_Lparen_Rparen3:
                    // <Func Decl> ::= <Func ID> '(' ')' <Block>
                    break;

                case ProductionIndex.Params_Comma:
                    // <Params> ::= <Param> ',' <Params>
                    var paramHead = r.GetData(0) as Parameter;
                    var paramTail = r.GetData(2) as List<Parameter>;
                    paramTail.Insert(0,paramHead);
                    return paramTail;

                case ProductionIndex.Params:
                    // <Params> ::= <Param>
                    return new List<Parameter>() { r.GetData(0) as Parameter };

                case ProductionIndex.Param_Const_Id:
                    // <Param> ::= const <Type> Id
                    break;

                case ProductionIndex.Param_Id:
                    // <Param> ::= <Type> Id
                    return new Parameter(r.GetData(0) as Type, r.GetData(1).ToString());
                    

                case ProductionIndex.Types_Comma:
                    // <Types> ::= <Type> ',' <Types>
                    break;

                case ProductionIndex.Types:
                    // <Types> ::= <Type>
                    break;

                case ProductionIndex.Idlist_Id_Comma:
                    // <Id List> ::= Id ',' <Id List>
                    break;

                case ProductionIndex.Idlist_Id:
                    // <Id List> ::= Id
                    break;

                case ProductionIndex.Funcid_Id:
                    // <Func ID> ::= <Type> Id
                    return new Function(r.GetData(0) as Type, r.GetData(1).ToString());

                case ProductionIndex.Funcid_Id2:
                    // <Func ID> ::= Id
                    break;

                case ProductionIndex.Typedefdecl_Typedef_Id_Semi:
                    // <Typedef Decl> ::= typedef <Type> Id ';'
                    break;

                case ProductionIndex.Structdecl_Struct_Id_Lbrace_Rbrace_Semi:
                    // <Struct Decl> ::= struct Id '{' <Struct Def> '}' ';'
                    break;

                case ProductionIndex.Uniondecl_Union_Id_Lbrace_Rbrace_Semi:
                    // <Union Decl> ::= union Id '{' <Struct Def> '}' ';'
                    break;

                case ProductionIndex.Structdef:
                    // <Struct Def> ::= <Var Decl> <Struct Def>
                    break;

                case ProductionIndex.Structdef2:
                    // <Struct Def> ::= <Var Decl>
                    break;

                case ProductionIndex.Vardecl_Semi:
                    // <Var Decl> ::= <Mod> <Type> <Var> <Var List> ';'
                    break;

                case ProductionIndex.Vardecl_Semi2:
                    // <Var Decl> ::= <Type> <Var> <Var List> ';'
                    var baseType = r.GetData(0) as IRType;
                    var partialDeclaration = r.GetData(1) as PartialIdDeclarationStatement;
                    var varList = r.GetData(2) as List<VarItem>;
                    var idDeclaration = partialDeclaration.DeclarationStatement;
                    var partialType = baseType;
                    if (partialDeclaration.ArrayType != null )
                    {
                        partialDeclaration.ArrayType.Type = partialType;
                        partialType = partialDeclaration.ArrayType;
                    }
                    idDeclaration.Type = partialType;
                    var idDeclarationList = new List<IdDeclarationStatement>() { idDeclaration };


                    foreach (var varItem in varList)
                    {
                        IRType baseVarItemType = baseType;
                        pointerCount = Convert.ToInt32(varItem.Pointers);
                        for (int i = 0; i < pointerCount; i++)
                        {
                            baseVarItemType = new PointerType(baseVarItemType);
                        }
                        if (varItem.PartialIdDeclaration.ArrayType != null)
                        {
                            varItem.PartialIdDeclaration.ArrayType.Type = baseVarItemType;
                            baseVarItemType = varItem.PartialIdDeclaration.ArrayType;
                        }
                        varItem.PartialIdDeclaration.DeclarationStatement.Type = baseVarItemType;
                        idDeclarationList.Add(varItem.PartialIdDeclaration.DeclarationStatement);
                    }
                    return idDeclarationList;

                case ProductionIndex.Vardecl_Semi3:
                    // <Var Decl> ::= <Mod> <Var> <Var List> ';'
                    break;

                case ProductionIndex.Var_Id:
                    // <Var> ::= Id <Array>
                    var arrayType = r.GetData(1) as ArrayType;
                    var id = r.GetData(0).ToString();
                    idDeclaration = new IdDeclarationStatement(id);
                    partialDeclaration = new PartialIdDeclarationStatement(idDeclaration, arrayType);
                    return partialDeclaration;

                case ProductionIndex.Var_Id_Eq:
                    // <Var> ::= Id <Array> '=' <Op If>
                    arrayType = r.GetData(1) as ArrayType;
                    var assigment = r.GetData(3) as Expression;
                    id = r.GetData(0).ToString();
                    idDeclaration = new IdDeclarationStatement(id,assigment);
                    partialDeclaration = new PartialIdDeclarationStatement(idDeclaration, arrayType);
                    return partialDeclaration;

                case ProductionIndex.Array_Lbracket_Rbracket:
                    // <Array> ::= '[' <Expr> ']'
                   var sizeExpression = r.GetData(1) as DecValue;
                    return new ArrayType(Convert.ToInt64(sizeExpression.Value));

                case ProductionIndex.Array_Lbracket_Rbracket2:
                    // <Array> ::= '[' ']'
                    return new ArrayType();

                case ProductionIndex.Array:
                    // <Array> ::= 
                    return null;

                case ProductionIndex.Varlist_Comma:
                    // <Var List> ::= ',' <Var Item> <Var List>
                    var varItemHead = r.GetData(1) as VarItem;
                    var varItemTail = r.GetData(2) as List<VarItem>;
                    varItemTail.Insert(0, varItemHead);
                    return varItemTail;

                case ProductionIndex.Varlist:
                    // <Var List> ::= 
                    return new List<VarItem>();

                case ProductionIndex.Varitem:
                    // <Var Item> ::= <Pointers> <Var>
                    var pointers = Convert.ToInt32(r.GetData(0));
                    var var = r.GetData(1) as PartialIdDeclarationStatement;
                    return new VarItem( pointers,  var);

                case ProductionIndex.Mod_Extern:
                    // <Mod> ::= extern
                    break;

                case ProductionIndex.Mod_Static:
                    // <Mod> ::= static
                    break;

                case ProductionIndex.Mod_Register:
                    // <Mod> ::= register
                    break;

                case ProductionIndex.Mod_Auto:
                    // <Mod> ::= auto
                    break;

                case ProductionIndex.Mod_Volatile:
                    // <Mod> ::= volatile
                    break;

                case ProductionIndex.Mod_Const:
                    // <Mod> ::= const
                    break;

                case ProductionIndex.Enumdecl_Enum_Id_Lbrace_Rbrace_Semi:
                    // <Enum Decl> ::= enum Id '{' <Enum Def> '}' ';'
                    break;

                case ProductionIndex.Enumdef_Comma:
                    // <Enum Def> ::= <Enum Val> ',' <Enum Def>
                    break;

                case ProductionIndex.Enumdef:
                    // <Enum Def> ::= <Enum Val>
                    break;

                case ProductionIndex.Enumval_Id:
                    // <Enum Val> ::= Id
                    return r.GetData(0);

                case ProductionIndex.Enumval_Id_Eq_Octliteral:
                    // <Enum Val> ::= Id '=' OctLiteral
                    break;

                case ProductionIndex.Enumval_Id_Eq_Hexliteral:
                    // <Enum Val> ::= Id '=' HexLiteral
                    break;

                case ProductionIndex.Enumval_Id_Eq_Decliteral:
                    // <Enum Val> ::= Id '=' DecLiteral
                    break;

                case ProductionIndex.Type:
                    // <Type> ::= <Base> <Pointers>
                    baseType = r.GetData(0) as IRType;
                    pointerCount = Convert.ToInt32(r.GetData(1));
                    for (int i = 0; i < pointerCount; i++)
                    {
                        baseType = new PointerType(baseType);
                    }
                    return baseType;

                case ProductionIndex.Base:
                    // <Base> ::= <Sign> <Scalar>
                    return r.GetData(1);

                case ProductionIndex.Base_Struct_Id:
                    // <Base> ::= struct Id
                    break;

                case ProductionIndex.Base_Struct_Lbrace_Rbrace:
                    // <Base> ::= struct '{' <Struct Def> '}'
                    break;

                case ProductionIndex.Base_Union_Id:
                    // <Base> ::= union Id
                    break;

                case ProductionIndex.Base_Union_Lbrace_Rbrace:
                    // <Base> ::= union '{' <Struct Def> '}'
                    break;

                case ProductionIndex.Base_Enum_Id:
                    // <Base> ::= enum Id
                    break;

                case ProductionIndex.Sign_Signed:
                    // <Sign> ::= signed
                    break;

                case ProductionIndex.Sign_Unsigned:
                    // <Sign> ::= unsigned
                    break;

                case ProductionIndex.Sign:
                    // <Sign> ::= 
                    return 0;

                case ProductionIndex.Scalar_Char:
                    // <Scalar> ::= char
                    return new CharType();

                case ProductionIndex.Scalar_Int:
                    // <Scalar> ::= int
                    return new IntType();

                case ProductionIndex.Scalar_Short:
                    return new ShortType();

                case ProductionIndex.Scalar_Long:
                    // <Scalar> ::= long
                    return new LongType();

                case ProductionIndex.Scalar_Short_Int:
                    //<Scalar> ::= short int
                    return new ShortIntType();

                case ProductionIndex.Scalar_Long_Int:
                    return new LongIntType();

                case ProductionIndex.Scalar_Float:
                    return new FloatType();

                case ProductionIndex.Scalar_Double:
                    return new DoubleType();

                case ProductionIndex.Scalar_Void:
                    return new VoidType();

                case ProductionIndex.Pointers_Times:
                    // <Pointers> ::= '*' <Pointers>
                    return Convert.ToInt32(r.GetData(1)) + 1;
                   

                case ProductionIndex.Pointers:
                    // <Pointers> ::= 
                    return 0;

                case ProductionIndex.Stm:
                    // <Stm> ::= <Var Decl>
                    break;

                case ProductionIndex.Stm_Id_Colon:
                    // <Stm> ::= Id ':'
                    return r.GetData(0).ToString();

                case ProductionIndex.Stm_If_Lparen_Rparen:
                    // <Stm> ::= if '(' <Expr> ')' <Stm>
                    var ifDeclaration = new IfStatement(r.GetData(2) as Expression, r.GetData(4) as Statement);
                    return ifDeclaration;

                case ProductionIndex.Stm_If_Lparen_Rparen_Else:
                    // <Stm> ::= if '(' <Expr> ')' <Then Stm> else <Stm>
                    ifDeclaration = new IfStatement(r.GetData(2) as Expression, r.GetData(4) as Statement, r.GetData(6) as Statement);
                    return ifDeclaration;

                case ProductionIndex.Stm_While_Lparen_Rparen:
                    // <Stm> ::= while '(' <Expr> ')' <Stm>
                    var whileDeclaration = new WhileStatement(r.GetData(2) as Expression, r.GetData(4) as Statement);
                    return whileDeclaration;

                case ProductionIndex.Stm_For_Lparen_Semi_Semi_Rparen:
                    // <Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Stm>
                    var forDeclaration = new ForStatement(r.GetData(2) as Expression, r.GetData(4) as Expression, r.GetData(6) as Expression,
                                                         r.GetData(8) as Statement);
                    return forDeclaration;

                case ProductionIndex.Stm2:
                    // <Stm> ::= <Normal Stm>
                    return r.GetData(0);

                case ProductionIndex.Thenstm_If_Lparen_Rparen_Else:
                    // <Then Stm> ::= if '(' <Expr> ')' <Then Stm> else <Then Stm>
                    ifDeclaration = new IfStatement(r.GetData(2) as Expression, r.GetData(4) as Statement, r.GetData(6) as Statement);
                    return ifDeclaration;

                case ProductionIndex.Thenstm_While_Lparen_Rparen:
                    // <Then Stm> ::= while '(' <Expr> ')' <Then Stm>
                    whileDeclaration = new WhileStatement(r.GetData(2) as Expression, r.GetData(4) as Statement);
                    return whileDeclaration;

                case ProductionIndex.Thenstm_For_Lparen_Semi_Semi_Rparen:
                    // <Then Stm> ::= for '(' <Arg> ';' <Arg> ';' <Arg> ')' <Then Stm>
                    forDeclaration = new ForStatement(r.GetData(2) as Expression, r.GetData(4) as Expression, r.GetData(6) as Expression,
                                                      r.GetData(8) as Statement);
                    return forDeclaration;

                case ProductionIndex.Thenstm:
                    // <Then Stm> ::= <Normal Stm>
                    return r.GetData(0);

                case ProductionIndex.Normalstm_Do_While_Lparen_Rparen:
                    // <Normal Stm> ::= do <Stm> while '(' <Expr> ')'
                    var doDeclaration = new DoStatement(r.GetData(1) as Statement, r.GetData(4) as Expression);
                    return doDeclaration;

                case ProductionIndex.Normalstm_Switch_Lparen_Rparen_Lbrace_Rbrace:
                    // <Normal Stm> ::= switch '(' <Expr> ')' '{' <Case Stms> '}'
                    var switchDeclaration = new SwitchStatement(r.GetData(2) as Expression, r.GetData(5) as List<DefaultCaseStatement>);
                    return switchDeclaration;

                case ProductionIndex.Normalstm:
                    // <Normal Stm> ::= <Block>
                    return r.GetData(0);

                case ProductionIndex.Normalstm_Semi:
                    // <Normal Stm> ::= <Expr> ';'
                    var expressionStatement = new ExpressionStatement(r.GetData(0) as Expression);
                    return expressionStatement;

                case ProductionIndex.Normalstm_Goto_Id_Semi:
                    // <Normal Stm> ::= goto Id ';'
                    break;

                case ProductionIndex.Normalstm_Break_Semi:
                    // <Normal Stm> ::= break ';'
                    break;

                case ProductionIndex.Normalstm_Continue_Semi:
                    // <Normal Stm> ::= continue ';'
                    break;

                case ProductionIndex.Normalstm_Return_Semi:
                    // <Normal Stm> ::= return <Expr> ';'
                    return new ReturnStatement(r.get_Data(1) as Expression);

                case ProductionIndex.Normalstm_Semi2:
                    // <Normal Stm> ::= ';'
                    return new NoOpExpression();

                case ProductionIndex.Arg:
                    // <Arg> ::= <Expr>
                    return r.GetData(0);

                case ProductionIndex.Arg2:
                    // <Arg> ::= 
                    return new NoOpExpression();

                case ProductionIndex.Casestms_Case_Colon:
                    // <Case Stms> ::= case <Value> ':' <Stm List> <Case Stms>
                    var caseStatementHead = new CaseStatement(r.GetData(1) as ValueExpression, r.GetData(3) as List<Statement>);
                    var caseStatementTail = r.GetData(4) as List<DefaultCaseStatement>;
                    caseStatementTail.Insert(0, caseStatementHead);
                    return caseStatementTail;

                case ProductionIndex.Casestms_Default_Colon:
                    // <Case Stms> ::= default ':' <Stm List>
                    return new List<DefaultCaseStatement>() { new DefaultCaseStatement(r.GetData(2) as List<Statement>) };

                case ProductionIndex.Casestms:
                    // <Case Stms> ::=
                    return new List<DefaultCaseStatement>();

                case ProductionIndex.Block_Lbrace_Rbrace:
                    // <Block> ::= '{' <Stm List> '}'
                    return new BlockStatement(r.GetData(1) as List<Statement>);

                case ProductionIndex.Stmlist:
                    // <Stm List> ::= <Stm> <Stm List>
                    var head = r.GetData(1) as List<Statement>;
                    head.Insert(0, r.GetData(0) as Statement);
                    return head;

                case ProductionIndex.Stmlist2:
                    // <Stm List> ::= 
                    return new List<Statement>();

                case ProductionIndex.Expr_Comma:
                    // <Expr> ::= <Expr> ',' <Op Assign>
                    break;

                case ProductionIndex.Expr:
                    // <Expr> ::= <Op Assign>
                    return r.GetData(0);

                case ProductionIndex.Opassign_Eq:
                    // <Op Assign> ::= <Op If> '=' <Op Assign>
                    return new AssignExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Pluseq:
                    // <Op Assign> ::= <Op If> '+=' <Op Assign>
                    return new AdditionAssignmentExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Minuseq:
                    // <Op Assign> ::= <Op If> '-=' <Op Assign>
                    return new SubtractionAsigExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Timeseq:
                    // <Op Assign> ::= <Op If> '*=' <Op Assign>
                    return new MultiplicationAsigExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Diveq:
                    // <Op Assign> ::= <Op If> '/=' <Op Assign>
                    return new DivisionAsigExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Careteq:
                    // <Op Assign> ::= <Op If> '^=' <Op Assign>
                    return new BitwiseXorAssignmentExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Ampeq:
                    // <Op Assign> ::= <Op If> '&=' <Op Assign>
                    return new BitwiseAndAssignExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Pipeeq:
                    // <Op Assign> ::= <Op If> '|=' <Op Assign>
                    return new BitwiseOrAssigExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Gtgteq:
                    // <Op Assign> ::= <Op If> '>>=' <Op Assign>
                    return new BitwiseRightShiftAssigExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign_Ltlteq:
                    // <Op Assign> ::= <Op If> '<<=' <Op Assign>
                    return new BitwiseLeftShiftAssigExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opassign:
                    // <Op Assign> ::= <Op If>
                    return r.get_Data(0);

                case ProductionIndex.Opif_Question_Colon:
                    // <Op If> ::= <Op Or> '?' <Op If> ':' <Op If>
                    return new TernaryConditional(r.GetData(0) as Expression, r.GetData(2) as Expression, r.GetData(4) as Expression);

                case ProductionIndex.Opif:
                    // <Op If> ::= <Op Or>
                    return r.get_Data(0);

                case ProductionIndex.Opor_Pipepipe:
                    // <Op Or> ::= <Op Or> '||' <Op And>
                    return new LogicalOrExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opor:
                    // <Op Or> ::= <Op And>
                    return r.get_Data(0);

                case ProductionIndex.Opand_Ampamp:
                    // <Op And> ::= <Op And> '&&' <Op BinOR>
                    return new LogicAndExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opand:
                    // <Op And> ::= <Op BinOR>
                    return r.get_Data(0);

                case ProductionIndex.Opbinor_Pipe:
                    // <Op BinOR> ::= <Op BinOR> '|' <Op BinXOR>
                    return new BitwiseOrExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opbinor:
                    // <Op BinOR> ::= <Op BinXOR>
                    return r.get_Data(0);

                case ProductionIndex.Opbinxor_Caret:
                    // <Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND>
                    return new BitwiseXorExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opbinxor:
                    // <Op BinXOR> ::= <Op BinAND>
                    return r.get_Data(0);

                case ProductionIndex.Opbinand_Amp:
                    // <Op BinAND> ::= <Op BinAND> '&' <Op Equate>
                    return new BitwiseAndExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opbinand:
                    // <Op BinAND> ::= <Op Equate>
                    return r.get_Data(0);

                case ProductionIndex.Opequate_Eqeq:
                    // <Op Equate> ::= <Op Equate> '==' <Op Compare>
                    return new EqualsExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opequate_Exclameq:
                    // <Op Equate> ::= <Op Equate> '!=' <Op Compare>
                    return new NotEqualToExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opequate:
                    // <Op Equate> ::= <Op Compare>
                    return r.get_Data(0);

                case ProductionIndex.Opcompare_Lt:
                    // <Op Compare> ::= <Op Compare> '<' <Op Shift>
                    return new LessThanExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opcompare_Gt:
                    // <Op Compare> ::= <Op Compare> '>' <Op Shift>
                    return new GreaterThanExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opcompare_Lteq:
                    // <Op Compare> ::= <Op Compare> '<=' <Op Shift>
                    return new LessOrEqualToExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opcompare_Gteq:
                    // <Op Compare> ::= <Op Compare> '>=' <Op Shift>
                    return new GreaterOrEqualExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opcompare:
                    // <Op Compare> ::= <Op Shift>
                    return r.get_Data(0);

                case ProductionIndex.Opshift_Ltlt:
                    // <Op Shift> ::= <Op Shift> '<<' <Op Add>
                    return new BitwiseLeftShiftExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opshift_Gtgt:
                    return new BitwiseRightShiftExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opshift:
                    // <Op Shift> ::= <Op Add>
                    return r.get_Data(0);

                case ProductionIndex.Opadd_Plus:
                    // <Op Add> ::= <Op Add> '+' <Op Mult>
                    return new AddExpression(left: r.get_Data(0) as Expression, right: r.get_Data(2) as Expression);
                    
                case ProductionIndex.Opadd_Minus:
                    // <Op Add> ::= <Op Add> '-' <Op Mult>
                    return new SubExpression(left: r.get_Data(0) as Expression, right: r.get_Data(2) as Expression);

                case ProductionIndex.Opadd:
                    // <Op Add> ::= <Op Mult>
                    return r.get_Data(0);

                case ProductionIndex.Opmult_Times:
                    // <Op Mult> ::= <Op Mult> '*' <Op Unary>
                    return new MulExpression(left: r.get_Data(0) as Expression, right: r.get_Data(2) as Expression);

                case ProductionIndex.Opmult_Div:
                    // <Op Mult> ::= <Op Mult> '/' <Op Unary>
                    return new DivisionExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opmult_Percent:
                    // <Op Mult> ::= <Op Mult> '%' <Op Unary>
                    return new ModExpression(left: r.GetData(0) as Expression, right: r.GetData(2) as Expression);

                case ProductionIndex.Opmult:
                    // <Op Mult> ::= <Op Unary>
                    return r.get_Data(0);

                case ProductionIndex.Opunary_Exclam:
                    // <Op Unary> ::= '!' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Tilde:
                    // <Op Unary> ::= '~' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Minus:
                    // <Op Unary> ::= '-' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Times:
                    // <Op Unary> ::= '*' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Amp:
                    // <Op Unary> ::= '&' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Plusplus:
                    // <Op Unary> ::= '++' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Minusminus:
                    // <Op Unary> ::= '--' <Op Unary>
                    return r.get_Data(1);

                case ProductionIndex.Opunary_Plusplus2:
                    // <Op Unary> ::= <Op Pointer> '++'
                    return r.get_Data(0);

                case ProductionIndex.Opunary_Minusminus2:
                    // <Op Unary> ::= <Op Pointer> '--'
                    return r.get_Data(0);

                case ProductionIndex.Opunary_Lparen_Rparen:
                    // <Op Unary> ::= '(' <Type> ')' <Op Unary>
                    break;

                case ProductionIndex.Opunary_Sizeof_Lparen_Rparen:
                    // <Op Unary> ::= sizeof '(' <Type> ')'
                    
                    break;

                case ProductionIndex.Opunary_Sizeof_Lparen_Id_Rparen:
                    // <Op Unary> ::= sizeof '(' Id <Pointers> ')'
                    break;

                case ProductionIndex.Opunary:
                    // <Op Unary> ::= <Op Pointer>
                    return r.get_Data(0);

                case ProductionIndex.Oppointer_Dot:
                    // <Op Pointer> ::= <Op Pointer> '.' <Value>
                    break;

                case ProductionIndex.Oppointer_Minusgt:
                    // <Op Pointer> ::= <Op Pointer> '->' <Value>
                    break;

                case ProductionIndex.Oppointer_Lbracket_Rbracket:
                    // <Op Pointer> ::= <Op Pointer> '[' <Expr> ']'
                    break;

                case ProductionIndex.Oppointer:
                    // <Op Pointer> ::= <Value>
                    return r.get_Data(0);

                case ProductionIndex.Value_Octliteral:
                    // <Value> ::= OctLiteral
                    return new DecValue(Convert.ToInt32(r.get_Data(0).ToString(),8));


                case ProductionIndex.Value_Hexliteral:
                    // <Value> ::= HexLiteral
                    return new DecValue(Convert.ToInt32(r.GetData(0).ToString(),16));

                case ProductionIndex.Value_Decliteral:
                    // <Value> ::= DecLiteral
                    return new DecValue(Convert.ToInt32(r.get_Data(0)));
                    

                case ProductionIndex.Value_Stringliteral:
                    // <Value> ::= StringLiteral
                    return new StringLiteral(r.GetData(0).ToString());

                case ProductionIndex.Value_Charliteral:
                    // <Value> ::= CharLiteral
                    return new CharLiteral(r.GetData(0).ToString());

                case ProductionIndex.Value_Floatliteral:
                    // <Value> ::= FloatLiteral
                    return new FloatLiteral(Convert.ToDouble(r.GetData(0)));

                case ProductionIndex.Value_Id_Lparen_Rparen:
                    // <Value> ::= Id '(' <Expr> ')'

                    break;

                case ProductionIndex.Value_Id_Lparen_Rparen2:
                    // <Value> ::= Id '(' ')'
                    break;

                case ProductionIndex.Value_Id:
                    // <Value> ::= Id
                    if (r.GetData(0).ToString() == "true")
                    {
                        return new DecValue(1);
                    }
                    else
                        if (r.GetData(0).ToString() == "false")
                        {
                            return new DecValue(0);
                        }
                        else
                            return new IdValue(r.GetData(0));
                    ;

                case ProductionIndex.Value_Lparen_Rparen:
                    // <Value> ::= '(' <Expr> ')'
                    return r.GetData(1) as Expression;

            }  //switch

            return result;
            
        }


    }; //MyParser
}